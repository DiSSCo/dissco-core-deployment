apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-exporter-backend-deployment
  namespace: default
  labels:
    app: data-exporter-backend-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: data-exporter-backend
  template:
    metadata:
      labels:
        app: data-exporter-backend
        language: java
    spec:
      serviceAccountName: data-exporter-backend-service-account
      automountServiceAccountToken: true
      containers:
        - name: data-exporter-backend
          image: public.ecr.aws/dissco/dissco-data-exporter-backend:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 80
          env:
            - name: spring.datasource.url
              value: jdbc:postgresql://terraform-20230822143945532600000001.cbppwfnjypll.eu-west-2.rds.amazonaws.com:5432/dissco
            - name: spring.datasource.username
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: db-username
            - name: spring.datasource.password
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: db-password
            - name: job.endpoint
              value: https://dev.dissco.tech/api/data-export/v1/internal
            - name: spring.security.oauth2.resourceserver.jwt.issuer-uri
              value: https://login-demo.dissco.eu/auth/realms/dissco
            - name: token.IdName
              value: demo-api-client
            - name: token.SecretName
              value: handle-endpoint-token
            - name: aws.access-key
              valueFrom:
                secretKeyRef:
                  name: aws-secrets
                  key: ses-access-key
            - name: aws.secret-access-key
              valueFrom:
                secretKeyRef:
                  name: aws-secrets
                  key: ses-access-key-secret
          resources:
            requests:
              memory: "500Mi"
              cpu: "200m"
            limits:
              memory: "500Mi"
              cpu: "750m"
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 60
            failureThreshold: 2
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: db-secrets
              mountPath: "/mnt/secrets-store/db-secrets"
              readOnly: true
            - name: aws-secrets
              mountPath: "/mnt/secrets-store/aws-secrets"
              readOnly: true
      volumes:
        - name: db-secrets
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "db-secrets"
        - name: aws-secrets
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "aws-secrets"
