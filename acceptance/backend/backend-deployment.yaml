apiVersion: apps/v1
kind: Deployment
metadata:
  name: dissco-backend-deployment
  namespace: default
  labels:
    app: dissco-backend-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dissco-backend
  template:
    metadata:
      labels:
        app: dissco-backend
        language: java
    spec:
      serviceAccountName: secret-manager
      automountServiceAccountToken: true
      containers:
        - name: dissco-backend
          image: public.ecr.aws/dissco/dissco-core-backend:sha-be50771   # Feb-14-2025
          imagePullPolicy: Always
          ports:
            - containerPort: 80
          env:
            - name: spring.datasource.url
              value: jdbc:postgresql://terraform-20230828064251677200000001.cbppwfnjypll.eu-west-2.rds.amazonaws.com:5432/dissco
            - name: spring.datasource.username
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: db-username
            - name: spring.datasource.password
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: db-password
            - name: elasticsearch.hostname
              value: elastic-search-es-http.elastic.svc.cluster.local
            - name: elasticsearch.port
              value: "9200"
            - name: elasticsearch.username
              valueFrom:
                secretKeyRef:
                  name: aws-secrets
                  key: elastic-username
            - name: elasticsearch.password
              valueFrom:
                secretKeyRef:
                  name: aws-secrets
                  key: elastic-password
            - name: springdoc.api-docs.path
              value: /api/v3/api-docs
            - name: springdoc.swagger-ui.path
              value: /api/swagger-ui.html
            - name: spring.security.oauth2.resourceserver.jwt.issuer-uri
              value: https://login-demo.dissco.eu/auth/realms/dissco
            - name: spring.security.oauth2.authorizationserver.endpoint.jwk-set-uri
              value: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs
            - name: jwt.auth.converter.resource-id
              value: springboot-keycloak-client
            - name: feign.annotations
              value: dissco-core-annotation-processing-service-web.default.svc.cluster.local:8080
            - name: mongo.connection-string
              valueFrom:
                secretKeyRef:
                  name: aws-secrets
                  key: mongodb-connection
            - name: mongo.database
              value: dissco
            - name: kafka.publisher.host
              value: kafka-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092
            - name: application.base-url
              value: https://sandbox.dissco.tech
            - name: fdo.profile
              value: https://hdl.handle.net/21.T11148/532ce6796e2828dd2be6
            - name: fdo.agent
              value: https://ror.org/0566bfb96
            - name: fdo.digital-object-type
              value: https://hdl.handle.net/21.T11148/532ce6796e2828dd2be6
            - name: token.grant-type
              value: client_credentials
            - name: token.id
              value: demo-api-client
            - name: token.secret
              valueFrom:
                secretKeyRef:
                  name: aws-secrets
                  key: handle-endpoint-token
            - name: endpoint.handle-endpoint
              value: https://sandbox.dissco.tech/handle-manager/api/pids/v1/
            - name: endpoint.token-endpoint
              value: https://login-demo.dissco.eu/auth/realms/dissco/protocol/openid-connect/token
          resources:
            requests:
              memory: "500Mi"
              cpu: "200m"
            limits:
              memory: "500Mi"
              cpu: "500m"
              ephemeral-storage: "32Mi"
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 60
            failureThreshold: 2
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: db-secrets
              mountPath: "/mnt/secrets-store/db-secrets"
              readOnly: true
            - name: aws-secrets
              mountPath: "/mnt/secrets-store/aws-secrets"
              readOnly: true
      volumes:
        - name: db-secrets
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "db-secrets"
        - name: aws-secrets
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "aws-secrets"
