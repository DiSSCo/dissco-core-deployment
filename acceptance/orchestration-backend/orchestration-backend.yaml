apiVersion: apps/v1
kind: Deployment
metadata:
  name: dissco-orchestration-backend
  labels:
    app: dissco-orchestration-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dissco-orchestration-backend
  template:
    metadata:
      labels:
        app: dissco-orchestration-backend
        language: java
    spec:
      automountServiceAccountToken: true
      serviceAccountName: dissco-orchestration-backend-sa
      containers:
        - name: dissco-orchestration-backend
          image: public.ecr.aws/dissco/dissco-core-orchestration-backend:sha-aafb3d7   # Sep-08-2025
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: spring.datasource.url
              value: jdbc:postgresql://terraform-20230828064251677200000001.cbppwfnjypll.eu-west-2.rds.amazonaws.com:5432/dissco
            - name: spring.datasource.username
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: db-username
            - name: spring.datasource.password
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: db-password
            - name: spring.security.oauth2.resourceserver.jwt.issuer-uri
              value: https://login-demo.dissco.eu/auth/realms/dissco
            - name: spring.security.oauth2.authorizationserver.endpoint.jwk-set-uri
              value: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs
            - name: jwt.auth.converter.resource-id
              value: springboot-keycloak-client
            - name: spring.rabbitmq.password
              valueFrom:
                secretKeyRef:
                  name: aws-secrets
                  key: rabbitmq-password
            - name: spring.rabbitmq.username
              valueFrom:
                secretKeyRef:
                  name: aws-secrets
                  key: rabbitmq-username
            - name: spring.rabbitmq.host
              value: rabbitmq-cluster.rabbitmq.svc.cluster.local
            - name: token.id
              value: demo-api-client
            - name: token.grant-type
              value: client_credentials
            - name: endpoint.token-endpoint
              value: https://login-demo.dissco.eu/auth/realms/dissco/protocol/openid-connect/token
            - name: endpoint.handle-endpoint
              value: https://sandbox.dissco.tech/handle-manager/api/pids/v1/
            - name: application.baseUrl
              value: acc-orchestration.dissco.tech
            - name: token.secret
              valueFrom:
                secretKeyRef:
                  name: aws-secrets
                  key: handle-endpoint-token
            - name: translator-job.image
              value: public.ecr.aws/dissco/dissco-core-translator:sha-cb31242   # Aug-26-2025
            - name: mas.runningEndpoint
              value: https://sandbox.dissco.tech/api/v1/mjr
            - name: translator-job.export.export-image
              value: public.ecr.aws/dissco/source-system-job-scheduler:sha-9cb59e4 # Jun-20-2025
            - name: translator-job.export.keycloak
              value: https://login-demo.dissco.eu/
            - name: translator-job.export.dissco-domain
              value: sandbox.dissco.tech
            - name: s3.accessKey
              valueFrom:
                secretKeyRef:
                  name: aws-secrets
                  key: orchestration-s3-access-key
            - name: s3.accessSecret
              valueFrom:
                secretKeyRef:
                  name: aws-secrets
                  key: orchestration-s3-access-key-secret
          resources:
            requests:
              memory: "500Mi"
              cpu: "200m"
            limits:
              memory: "500Mi"
              cpu: "1000m"
              ephemeral-storage: "1Gi"
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 5
            failureThreshold: 10
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: aws-secrets
              mountPath: "/mnt/secrets-store/aws-secrets"
              readOnly: true
      volumes:
        - name: aws-secrets
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "aws-secrets"
